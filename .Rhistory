i
## Return a matrix that is the inverse of 'x'
}
acheSolve(makeCacheMatrix(A),B)
cacheSolve(makeCacheMatrix(A),B)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:10))
cachemean(makeVector(1:10))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
print("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:10))
cachemean(makeVector(1:10))
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, y, ...) {
i <- x$getinv()
data <- x$get()
print(data)
if(!is.null(i) & isTRUE(y==data)){
print("getting cached data")
return(i)
}
i <- solve(data, ...)
x$setinv(i)
i
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A),B)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, y, ...) {
i <- x$getinv()
data <- x$get()
print(data)
if(!is.null(i) & identical(y,data)){
print("getting cached data")
return(i)
}
i <- solve(data, ...)
x$setinv(i)
i
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A),B)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, y, ...) {
i <- x$getinv()
data <- x$get()
print(data)
if(!is.null(i) & identical(y,data)){
message("getting cached data")
return(i)
}
i <- solve(data, ...)
x$setinv(i)
i
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A),B)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, y, ...) {
i <- x$getinv()
data <- x$get()
print(data)
if(!is.null(i) & identical(y,data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
x$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A),B)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, z, ...) {
i <- x$getinv()
data <- x$get()
print(data)
if(!is.null(i) & identical(z,data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
x$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A),B)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(z,...) {
i <- z$getinv()
data <- z$get()
print(data)
if(!is.null(i) & identical(x,data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
x$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A))
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(z,...) {
i <- z$getinv()
data <- z$get()
print(data)
if(!is.null(i) & identical(x,data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
z$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A))
cacheSolve(makeCacheMatrix(A))
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(z,...) {
i <- z$getinv()
data <- z$get()
print(data)
if(!is.null(i) && identical(x,data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
z$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(A))
cacheSolve(makeCacheMatrix(A))
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x,...) {
i <- x$getinv()
data <- x$get()
new<-x$set()
print(data)
if(!is.null(i) && identical(new, data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
z$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
mat<-makeCacheMatrix(A)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x,...) {
i <- x$getinv()
data <- x$get()
new<-x$set()
print(data)
if(!is.null(i) && identical(new, data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
x$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
mat<-makeCacheMatrix(A)cacheSolve(mat)
mat<-makeCacheMatrix(A)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
y<- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x,...) {
i <- x$getinv()
data <- x$get()
new<-x$set()
print(data)
if(!is.null(i) && identical(new, data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
x$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
mat<-makeCacheMatrix(A)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
y<- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x,...) {
new<-x$set()
i <- x$getinv()
data <- x$get()
print(data)
if(!is.null(i) && identical(new, data)){
message("getting cached data")
return(i)
} else {
i <- solve(data, ...)
x$setinv(i)
i
}
## Return a matrix that is the inverse of 'x'
}
mat<-makeCacheMatrix(A)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
y<- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x,...) {
i <- x$getinv()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinv(i)
i
## Return a matrix that is the inverse of 'x'
}
mat<-makeCacheMatrix(A)
cacheSolve(mat)
mat<-makeCacheMatrix(A)
mat
str(mat)
help(str)
x = numeric()
x
test <- function(x = 4, y) { x + y }
test(2, 4)
test(4)
test(y=4)
x <- 1
f <- function() x
f()
g <- function() { x <- 0; f() }
g()
i <- NULL
test <- function() {i <- 2; i}
test()
x <- 1
f <- function() x
g <- function() { x <- 0; (f(), x) }
x <- 1
f <- function() x
g <- function() { x <- 0; c(f(), x) }
g()
x <- 1
f <- function() x
g <- function() { c(f(), x) }
g()
x <- 1
f <- function() { x <- 7; print(x) ; x }
f()
f <- function() { x <- 7; print(x) ; x+1 }
f()
getwd()
setwd("/Users/lulu/R_Coursera/R_Programming/")
x <- 1
print(x)
g <- function() {
f <- function() {
x <- 7
print(x)
}
x <- 100
x
}
print(x)
# f <- function() { x <- 7; print(x) ; x }
x <- 1
print(x)
g <- function() {
f <- function() {
x <- 7
print(x)
}
x <- 100
x
}
g()
print(x)
print(x)
#print(x)
#print(x)
# f <- function() { x <- 7; print(x) ; x }
x <- 1
#print(x)
g <- function() {
f <- function() {
x <- 7
print(x)
}
#        x <- 100
list(x=x, f=f)
}
g_instance <- g()
g_instance$f()
g_instance$x()
#print(x)
# f <- function() { x <- 7; print(x) ; x }
x <- 1
#print(x)
g <- function() {
f <- function() {
x <- 7
print(x)
}
#        x <- 100
print("Inside g()")
print(x)
list(f=f)
}
g_instance <- g()
g_instance$f()
#print(x)
